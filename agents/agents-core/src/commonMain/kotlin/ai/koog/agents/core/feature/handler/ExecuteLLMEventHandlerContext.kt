package ai.koog.agents.core.feature.handler

import ai.koog.agents.core.tools.ToolDescriptor
import ai.koog.prompt.dsl.Prompt
import ai.koog.prompt.executor.model.LLMChoice
import ai.koog.prompt.llm.LLModel
import ai.koog.prompt.message.Message

/**
 * Represents the context for handling LLM-specific events within the framework.
 */
public interface LLMEventHandlerContext : EventHandlerContext

/**
 * Represents the context for handling a before LLM call event.
 *
 * @property prompt The prompt that will be sent to the language model.
 * @property tools The list of tool descriptors available for the LLM call.
 * @property model The language model instance being used.
 */
public data class BeforeLLMCallContext(
    val runId: String,
    val prompt: Prompt,
    val model: LLModel,
    val tools: List<ToolDescriptor>,
) : LLMEventHandlerContext

/**
 * Represents the context for handling an after LLM call event.
 *
 * @property prompt The prompt that was sent to the language model.
 * @property tools The list of tool descriptors that were available for the LLM call.
 * @property model The language model instance that was used.
 * @property responses The response messages received from the language model.
 */
public data class AfterLLMCallContext(
    val runId: String,
    val prompt: Prompt,
    val model: LLModel,
    val tools: List<ToolDescriptor>,
    val responses: List<Message.Response>
) : LLMEventHandlerContext

/**
 * Represents the context for handling the start of LLM streaming event.
 *
 * @property prompt The prompt that will be sent to the language model.
 * @property model The language model instance being used.
 */
public data class StartLLMStreamingContext(
    val runId: String,
    val prompt: Prompt,
    val model: LLModel
) : LLMEventHandlerContext

/**
 * Represents a context used before executing an operation that involves multiple choices in a session.
 *
 * @property runId The unique identifier for the current session. This helps to correlate the operation with a specific session instance.
 * @property prompt The prompt associated with the operation. It contains details such as messages and language model settings.
 * @property model The language model being used for the operation. It includes its provider, identifier, and capabilities.
 * @property tools The list of tools available for use during the operation. Each tool is represented by a descriptor that provides its details.
 */
public data class BeforeExecuteMultipleChoicesContext(
    val runId: String,
    val prompt: Prompt,
    val model: LLModel,
    val tools: List<ToolDescriptor>
)

/**
 * Context provided after executing multiple-choice operations in an interaction involving a language model.
 * This data class encapsulates relevant information such as the run identifier, prompt details,
 * model used, tools involved, and the response from the model.
 *
 * @property runId A unique identifier for the session where the operation was executed.
 * @property prompt The [Prompt] instance used during the operation, containing details about the messages and parameters.
 * @property model The [LLModel] used to generate responses, including the provider, identifier, and supported capabilities.
 * @property tools A list of [ToolDescriptor] instances representing tools available or used during the operation.
 * @property responses The collection of [LLMChoice] generated by the model as a result of executing the prompt.
 */
public data class AfterExecuteMultipleChoicesContext(
    val runId: String,
    val prompt: Prompt,
    val model: LLModel,
    val tools: List<ToolDescriptor>,
    val responses: List<LLMChoice>,
)
